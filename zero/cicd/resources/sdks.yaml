---
kind: WorkflowTemplate
apiVersion: argoproj.io/v1alpha1
metadata:
  name: dagger-v1
  annotations:
    workflows.argoproj.io/maintainer: "jeeg@mailup.com"
    workflows.argoproj.io/description: >-
      This workflow template contains a template to run dagger

      Dagger Go SDK supported version >= 0.4.0 < 0.5.0
      Dagger Cue SDK supported version >= 0.2.36 < 0.3.0
    workflows.argoproj.io/tags: go-sdk,cue-sdk
    workflows.argoproj.io/version: ">= 3.4.0"
spec:
  templates:
    - name: go-sdk
      inputs:
        parameters:
          - name: action
          # # Env file as string
          - name: env
            default: ""
          - name: artifacts
            default: "/result"
          - name: context
            default: "."
          # Relative path under workspaces as base directory, must be provided and unique
          - name: path
          - name: registry-url
            default: ""
          - name: tags
            default: ""
          - name: registry-creds
            default: regcred
          - name: registry-creds-format
            default: "collapsed" # collapsed
          - name: ssh-key # FIXME change to list
            default: ssh-key
          - name: gpg-key # FIXME change to list
            default: gpg-key
          - name: aws-creds
            default: aws-creds
          - name: log-format
            default: "plain"
          - name: log-level
            default: info
          - name: sops-version
            default: "3.7.3"
      volumes:
        - name: installer-scripts
          configMap:
            name: installer-scripts-v1
            defaultMode: 0777
        - name: dind-config
          configMap:
            name: dind-config-v1
            defaultMode: 0777
        - name: dagger-config
          configMap:
            name: dagger-config-v1
            defaultMode: 0777
        - name: docker-creds
          secret:
            secretName: "{{inputs.parameters.registry-creds}}"
            defaultMode: 384 # Equivalent to 0600
            items:
              - key: .dockerconfigjson
                path: ./config.json
        - name: kube-creds
          secret:
            secretName: "kubecred"
            defaultMode: 384 # Equivalent to 0600
            items:
              - key: .kubeconfig
                path: ./config
        - name: dagger-cache
          emptyDir: {} # Or other volume type
        - name: dind-socket
          emptyDir: {}
        - name: custom-tools
          emptyDir: {}
      initContainers:
        - name: download-tools
          image: docker:20.10.23-alpine3.17
          command: [sh, -c]
          args:
            - >-
              apk update && apk add bash curl &&

              /installer-scripts/install_kubectl.sh &&
              /installer-scripts/install_go.sh &&
              /installer-scripts/install_mage.sh
          volumeMounts:
            - name: installer-scripts
              mountPath: /installer-scripts
            - name: custom-tools
              mountPath: /custom-tools
      script:
        image: docker:20.10.23-alpine3.17
        env:
          - name: DOCKER_CONFIG
            value: /root/.docker
          - name: DOCKER_HOST
            value: 127.0.0.1
          - name: DAGGER_CACHE_PATH
            value: /tmp/.dagger-cache
        volumeMounts:
          - name: "{{workflow.parameters.workspaces-volume}}"
            mountPath: /workspaces
          - name: dind-socket
            mountPath: /var/run/
          - name: docker-creds
            mountPath: /root/.docker
          - name: kube-creds
            mountPath: /root/.kube
          - mountPath: /tmp/.dagger-cache
            name: dagger-cache
          # Important: Mount tools into $PATH
          - name: custom-tools
            subPath: kubectl
            mountPath: /usr/local/bin/kubectl
          - name: custom-tools
            subPath: go
            mountPath: /usr/local/go
          - name: custom-tools
            subPath: mage
            mountPath: /usr/local/bin/mage
        workingDir: /workspaces/{{inputs.parameters.path}}
        command: ["sh"]
        source: |
          quote () { printf %s\\n "$1" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/" ; }
          double_quote() { quote $1 | sed "s/'/\"/g" ; }

          # Add GoLang to the path
          export PATH=$PATH:/usr/local/go/bin

          # Install git
          apk update >/dev/null 2>&1; apk add -U --no-cache git  >/dev/null 2>&1

          build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

          env="{{inputs.parameters.env}}"
          action="{{inputs.parameters.action}}"
          log_format="{{inputs.parameters.log-format}}"
          log_level="{{inputs.parameters.log-level}}"

          tags=`printf %s "{{inputs.parameters.tags}}"`

          # Compute tags env variables
          ! [ "${tags}" = "" ] && export TAGS="${tags}"

          { env_variables=$(cat) ; } <<'EOE'
          {{inputs.parameters.env}}
          EOE
          if ! [ "${env}" == "" ]; then
            # Compute env variables from input env parameter
            mkdir -p /tmp; printf "%s" "${env_variables}" | sed -e '/^#/d;/^\s*$/d' -e "s/'/'\\\''/g" -e "s/=\(.*\)/='\1'/g" > /tmp/.env

            set -a      # turn on automatic exporting
            . /tmp/.env
            set +a      # turn off automatic exporting
          fi

          export CI="true"

          # export CGO_ENABLED=0
          # https://www.fairlyusefulcode.co.uk/post/go-alpine-linux/
          # ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2
          # build-base

          export _EXPERIMENTAL_DAGGER_SERVICES_DNS="1"
          export _EXPERIMENTAL_DAGGER_CACHE_CONFIG="type=registry;ref=docker-registry.container-registry.svc.cluster.local:5000/ci-cache;mode=max"
          export _EXPERIMENTAL_DAGGER_RUNNER_HOST=kube-pod://dagger

          go mod download

          mage ${action}
      # sidecars:
      #   - name: dind
      #     image: docker:20.10.23-dind-alpine3.17
      #     env:
      #       - name: DOCKER_TLS_CERTDIR
      #         value: ""
      #     securityContext:
      #       privileged: true
      #     volumeMounts:
      #       - name: dind-socket
      #         mountPath: /var/run/
      #       - name: dagger-config
      #         mountPath: /dagger-config
      #       - name: dind-config
      #         subPath: daemon.json
      #         mountPath: /etc/docker/daemon.json
      #     command: [dockerd-entrypoint.sh]
      outputs:
        artifacts:
          - name: result
            # fromExpression: "inputs.parameters.artifacts == '' ? '/artifacts' : inputs.parameters.artifacts"
            path: "{{inputs.parameters.artifacts}}"
            optional: true
